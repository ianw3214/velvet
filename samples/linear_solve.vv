# This calculates a final square matrix that represents (matrix^T matrix)
def square_matrix(
    matrix : arrdecay [f32; 10, 2], 
    target : arrdecay [f32; 2, 2]
        ) @ i32 {
    # Do the individual additions
    var index : i32 = 0;
    loop {
        target[0][0] = target[0][0] + matrix[0][index] * matrix[0][index];
        target[0][1] = target[0][1] + matrix[1][index] * matrix[0][index];
        target[1][0] = target[1][0] + matrix[1][index] * matrix[0][index];
        target[1][1] = target[1][1] + matrix[1][index] * matrix[1][index];
        index = index + 1;
        if index >= 9 then break;
    };
    0
}

# This calculates the inverse of a square matrix
def inverse_matrix(
    matrix : arrdecay [f32; 2, 2],
    target : arrdecay [f32; 2, 2]
        ) @ i32 {
    # Find the determinant first
    var denom : f32 = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    var determinant : f32 = 1.0 / denom;
    target[0][0] = matrix[1][1];
    target[0][1] = 0.0 - matrix[0][1];
    target[1][0] = 0.0 - matrix[1][0];
    target[1][1] = matrix[0][0];
    target[0][0] = target[0][0] * determinant;
    target[0][1] = target[0][1] * determinant;
    target[1][0] = target[1][0] * determinant;
    target[1][1] = target[1][1] * determinant;
    determinant
}

# This calculates the transpose of a matrix
def transpose_matrix(
    matrix : arrdecay [f32; 10, 2],
    target : arrdecay [f32; 2, 10]
        ) @ i32 {
    var index : i32 = 0;
    loop {
        target[index][0] = matrix[0][index];
        target[index][1] = matrix[1][index];
        index = index + 1;
        if index >= 9 then break;
    };
    0
}

def main() @ i32 {
    # x/y are the sample input/output datasets
    var x : [f32; 10, 2] = [ [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ];
    var y : [f32; 10] = [2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0];
    var square : [f32; 2, 2];
    square_matrix(arrdecay x, arrdecay square);
    var inverse : [f32; 2, 2];
    inverse_matrix(arrdecay square, arrdecay inverse);
    var transpose : [f32; 2, 10];
    transpose_matrix(arrdecay x, arrdecay transpose);
    # Theta = (X^T X)^-1 X^T y
    var interm : [f32; 10, 2];
    var index1 : i32 = 0;
    loop {
        interm[0][index1] = interm[0][index1] + 0.0;
        interm[1][index1] = interm[1][index1] + 0.0;
        index1 = index1 + 1;
        if index1 >= 9 then break;
    };
    var theta1 : f32 = 0.0;
    var theta2 : f32 = 0.0;
    printf(theta1);
    printf(theta2);
    0
}